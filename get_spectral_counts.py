import osimport numpy as npfrom astropy.io import fitsimport logginglogger = logging.getLogger(__name__)# Function to read in a spectrum and its corresponding background file,# and return the counts and a flag if any incidence occurreddef get_spectral_counts(infile, log_file, background_file=''):    """    Reads in input spectral file infile in FITS format, gets the total counts, and the    header keywords BACKFILE, BACKSCAL and EXPOSURE.    Then reads in the background file, gets its total counts and the header    keyword BACKSCAL    Then calculates the net counts scaling with the backscale values    Finally, writes out a dictionary with this information and a flag    Parameters:    - infile: input spectrum file in FITS format    - log_file (str): The log file to write the messages.    - background_file (str): The name of the background file (see above)    Returns:    - spec_dict (dict): A dictionary containing the name of the input spectrum,       total source counts, total background counts, total net counts, exposure time,       flag, and signal-to-noise ratio.    """    # Initializing output values    spec_dict = {        "spectrum_file": infile,        "sp_counts": np.nan,        "bg_counts": np.nan,        "sp_netcts": np.nan,        "sp_exp": np.nan,        "flag": -2,        "snr": np.nan    }    # Trying to open the input file    try:        hdul = fits.open(infile)        spec_dict["sp_counts"] = hdul[1].data['COUNTS'].sum()        spec_dict["sp_exp"] = hdul[1].header['EXPOSURE']        sp_backscal = hdul[1].header['BACKSCAL']        bgd_file = hdul[1].header['BACKFILE']        hdul.close()        del hdul        # Determine the background file        if background_file == '':            background_file = bgd_file        elif background_file == 'pps':            background_file = infile.replace("SRSPEC", "BGSPEC")        elif background_file == 'path':            fullname = os.path.abspath(infile)            fullpath = os.path.dirname(fullname)            background_file = os.path.join(fullpath, bgd_file)        try:            bg_hdul = fits.open(background_file)            spec_dict["bg_counts"] = bg_hdul[1].data['COUNTS'].sum()            bg_backscal = bg_hdul[1].header['BACKSCAL']            bg_hdul.close()            del bg_hdul            # Calculate net counts            spec_dict["sp_netcts"] = spec_dict["sp_counts"] - (spec_dict["bg_counts"] * sp_backscal / bg_backscal)            # Set flag values            if spec_dict["bg_counts"] <= 0:                spec_dict["flag"] = 1            elif spec_dict["sp_netcts"] <= 0 or spec_dict["sp_counts"] <= 0:                spec_dict["flag"] = 2            else:                spec_dict["flag"] = 0            # Calculate SNR if flag is 0            if spec_dict["flag"] == 0:                spec_dict["snr"] = spec_dict["sp_netcts"] / np.sqrt(2 * spec_dict["sp_counts"] - spec_dict["sp_netcts"])        except:            message = f"Cannot open background FITS file {background_file}"            logger.info(message)            spec_dict["flag"] = -1    except:        message = f"Cannot open spectrum FITS file {infile}"        logger.info(message)        spec_dict["flag"] = -2    return spec_dictdef test_get_spectral_counts():    output_dir = './test_data/test'    if not os.path.exists(output_dir):        os.mkdir(output_dir)    # Set up logging    log_file = os.path.join(output_dir, 'test_get_spectral_counts.txt')    logging.basicConfig(filename=log_file, level=logging.INFO)    # Inexistent spectrum file    infile = 'dummy_file_FJC.txt'    spec_dict = get_spectral_counts(infile, log_file)    assert spec_dict['flag'] == -2    # Existent spectrum file, getting correct stats    infile = './test_data/0760940101/pps/P0760940101PNS003SRSPEC0017.FTZ'    spec_dict = get_spectral_counts(infile, log_file, background_file='pps')    assert spec_dict['sp_counts'] == 766    assert spec_dict['bg_counts'] == 8474    assert abs(spec_dict['sp_netcts'] - 271.88) <= 0.01    assert abs(spec_dict['sp_exp'] - 82181.94) <= 0.01    assert spec_dict['flag'] == 0    # Providing the name of the background file explicitly    background_file = './test_data/0760940101/pps/P0760940101PNS003BGSPEC0017.FTZ'    spec_dict = get_spectral_counts(infile, log_file, background_file=background_file)    assert spec_dict['sp_counts'] == 766    assert spec_dict['bg_counts'] == 8474    assert abs(spec_dict['sp_netcts'] - 271.88) <= 0.01    assert abs(spec_dict['sp_exp'] - 82181.94) <= 0.01    assert spec_dict['flag'] == 0    # Getting the name of the background file from the header keyword BACKFILE    background_file = 'path'    spec_dict = get_spectral_counts(infile, log_file, background_file=background_file)    assert spec_dict['sp_counts'] == 766    assert spec_dict['bg_counts'] == 8474    assert abs(spec_dict['sp_netcts'] - 271.88) <= 0.01    assert abs(spec_dict['sp_exp'] - 82181.94) <= 0.01    assert spec_dict['flag'] == 0if __name__ == "__main__":    test_get_spectral_counts()