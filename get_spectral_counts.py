import osimport numpy as npfrom astropy.io import fitsimport logginglogger = logging.getLogger(__name__)def get_spectral_counts(infile, log_file, background_file=None):    """    Reads a spectrum file and its background file, calculates counts, net counts, and SNR.    Parameters:    - infile (str): Input spectrum file in FITS format.    - log_file (str): Path to the log file for logging messages.    - background_file (str): Optional path to the background file. If not provided, it is derived from the spectrum file.    Returns:    - spec_dict (dict): A dictionary with spectrum details:        - spectrum_file: Input spectrum file.        - sp_counts: Total source counts.        - bg_counts: Total background counts.        - sp_netcts: Net counts.        - sp_exp: Exposure time.        - flag: Status flag (-2: error, -1: missing background, 0: good).        - snr: Signal-to-noise ratio.    """    spec_dict = {        "spectrum_file": infile,        "sp_counts": np.nan,        "bg_counts": np.nan,        "sp_netcts": np.nan,        "sp_exp": np.nan,        "flag": -2,  # Default flag for an error        "snr": np.nan    }    try:        with fits.open(infile) as hdul:            logger.info(f"Opened spectrum file: {infile}")            header = hdul[1].header            data = hdul[1].data            # Extract counts and exposure time            spec_dict["sp_counts"] = data["COUNTS"].sum()            spec_dict["sp_exp"] = header["EXPOSURE"]            sp_backscal = header["BACKSCAL"]            bgd_file_header = header.get("BACKFILE", "")            # Determine background file            if not background_file:                if bgd_file_header:                    background_file = os.path.join(os.path.dirname(infile), bgd_file_header)                else:                    logger.error(f"No BACKFILE found in header for {infile}")                    spec_dict["flag"] = -1                    return spec_dict            logger.info(f"Using background file: {background_file}")            # Check if the background file exists            if not os.path.exists(background_file):                logger.error(f"Background file not found: {background_file}")                spec_dict["flag"] = -1                return spec_dict            # Open and process the background file            with fits.open(background_file) as bg_hdul:                bg_data = bg_hdul[1].data                bg_header = bg_hdul[1].header                spec_dict["bg_counts"] = bg_data["COUNTS"].sum()                bg_backscal = bg_header["BACKSCAL"]                # Calculate net counts                spec_dict["sp_netcts"] = spec_dict["sp_counts"] - (                    spec_dict["bg_counts"] * sp_backscal / bg_backscal                )                # Set flags based on counts                if spec_dict["bg_counts"] <= 0:                    spec_dict["flag"] = 1                elif spec_dict["sp_netcts"] <= 0 or spec_dict["sp_counts"] <= 0:                    spec_dict["flag"] = 2                else:                    spec_dict["flag"] = 0                # Calculate SNR if valid                if spec_dict["flag"] == 0:                    spec_dict["snr"] = spec_dict["sp_netcts"] / np.sqrt(                        2 * spec_dict["sp_counts"] - spec_dict["sp_netcts"]                    )    except Exception as e:        logger.error(f"Error processing spectrum file {infile}: {e}")        spec_dict["flag"] = -2    return spec_dictdef test_get_spectral_counts():    log_file = "./test_data/test_spectral_counts.log"    os.makedirs(os.path.dirname(log_file), exist_ok=True)    logging.basicConfig(filename=log_file, level=logging.INFO)    infile = "./test_data/0760940101/pps/P0760940101PNS003SRSPEC0017.FTZ"    background_file = "./test_data/0760940101/pps/P0760940101PNS003BGSPEC0017.FTZ"    spec_dict = get_spectral_counts(infile, log_file, background_file=background_file)    print(f"Spectral counts: {spec_dict}")if __name__ == "__main__":    test_get_spectral_counts()