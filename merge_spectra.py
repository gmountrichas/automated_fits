import osimport shutilimport loggingfrom rebin_spectrum import rebin_spectrumlogger = logging.getLogger(__name__)# Function to merge and rebin the spectra suitable for fittingdef merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1):    """    Given lists of pn and MOS spectra suitable for spectral fitting, the spectra are merged,    and rebinned to >=1 count per bin.    The merging is done per instrument, so at most one spectrum per each of pn and MOS is created,    as well as some basic information (total, background and net counts, and exposure time).    The output is a list with two dictionaries, one per instrument, containing the spectrum name (with full path)    and some basic information.    Parameters:    - pn_spectra: list of dictionaries containing spectra suitable for fitting from pn    - mos_spectra: list of dictionaries containing spectra suitable for fitting from MOS    - srcid (long): SRCID of the source under study    - output_dir (str): full path to the directory where the output files should be written    - log_file (str): The log file to write the messages    - mincts (int): minimum number per bin in the binned output merged spectrum    Returns:    - merged_spectra (list): A list of dictionaries containing the full path and name for the merged spectra,       total source counts, total background counts, total net counts, exposure time, a flag, the signal-to-noise ratio,       and a string stating whether it is a pn or MOS spectrum.    """    logger.info('Merging spectra')    merged_spectra = []    for spec_list in [pn_spectra, mos_spectra]:        nspec = len(spec_list)        if nspec == 0:            # No spectra suitable for fitting, no need to do anything            continue        elif nspec == 1 and spec_list[0]['flag'] > 0:            # Only one spectrum, propagate its information            merged_spectra.append(spec_list[0])            continue        else:            # There is at least one spectrum suitable for fitting            instrument = spec_list[0]['instrument']            outname = f"{srcid}_{instrument}.pha"            merged_spectrum = os.path.join(output_dir, outname)            if nspec > 1:                # Select the spectrum with the highest SNR                snrs = [spec['snr'] for spec in spec_list]                max_snr_index = snrs.index(max(snrs))                if os.path.exists(merged_spectrum):                    logger.warning(f"File {merged_spectrum} already exists in {output_dir}, it will be overwritten")                # Copy the spectrum with the highest SNR                shutil.copy2(spec_list[max_snr_index]['spectrum_file'], merged_spectrum)            else:                # Only one spectrum, copy it                if os.path.exists(merged_spectrum):                    logger.warning(f"File {merged_spectrum} already exists in {output_dir}, it will be overwritten")                shutil.copy2(spec_list[0]['spectrum_file'], merged_spectrum)            # Rebin the spectrum            binned_spectrum = os.path.splitext(merged_spectrum)[0] + '.grp'            spec_dict = rebin_spectrum(merged_spectrum, binned_spectrum, log_file, mincts)            # Debugging output for rebinning            logger.info(f"Rebin spectrum output: {spec_dict}")            # Ensure the returned object is a dictionary            if isinstance(spec_dict, tuple):                spec_dict = {                    "spectrum_file": spec_dict[0],                    "sp_counts": spec_dict[1],                    "bg_counts": spec_dict[2],                    "sp_netcts": spec_dict[3],                    "sp_exp": spec_dict[4],                    "flag": spec_dict[5],                    "snr": spec_dict[6],                    "instrument": instrument                }            merged_spectra.append(spec_dict)  # Append as a dictionary    # Debugging output for the merged spectra list    logger.info(f"Merged spectrum list: {merged_spectra}")    logger.info('Finished merging spectra. Output results:')    for spec in merged_spectra:        logger.info(f"{spec}")    return merged_spectradef test_merge_spectra():    output_dir = './test_data/test'    if not os.path.exists(output_dir):        os.mkdir(output_dir)    log_file = os.path.join(output_dir, 'test_merge_spectra.txt')    logging.basicConfig(filename=log_file, level=logging.INFO)    srcid = 3067718060100029    # Test with empty lists    pn_spectra = []    mos_spectra = []    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (empty test):", merged_list)    assert len(merged_list) == 0    # Test with one spectrum in pn and none in mos    pn_spectra = [{'spectrum_file': 'dummyPN.fits', 'sp_counts': -1, 'bg_counts': 1, 'sp_netcts': -1, 'sp_exp': 1000.0, 'flag': 2, 'snr': -1, 'instrument': 'pn'}]    mos_spectra = []    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (one pn spectrum):", merged_list)    assert len(merged_list) == 1    assert merged_list[0]['flag'] == 2    # Test with one pn spectrum    pn_spectra = [{'spectrum_file': './test_data/test_spectrum1.fits', 'sp_counts': 766, 'bg_counts': 8474, 'sp_netcts': 271.88, 'sp_exp': 82181.93, 'flag': 0, 'snr': 7.65, 'instrument': 'pn'}]    mos_spectra = []    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (single pn spectrum):", merged_list)    assert len(merged_list) == 1    assert merged_list[0]['spectrum_file'].endswith('_pn.grp')    # Test with multiple MOS spectra    mos_spectra = [        {'spectrum_file': './test_data/test_spectrum2.fits', 'sp_counts': 308, 'bg_counts': 14296, 'sp_netcts': 63.04, 'sp_exp': 104469.41, 'flag': 0, 'snr': 2.68, 'instrument': 'MOS'},        {'spectrum_file': './test_data/test_spectrum3.fits', 'sp_counts': 236, 'bg_counts': 19138, 'sp_netcts': 99.07, 'sp_exp': 105554.51, 'flag': 0, 'snr': 5.13, 'instrument': 'MOS'}    ]    pn_spectra = []    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (multiple MOS spectra):", merged_list)    assert len(merged_list) == 1    assert merged_list[0]['spectrum_file'].endswith('_MOS.grp')    assert abs(merged_list[0]['snr'] - 5.13) <= 0.01    # Test with pn and mos spectra    pn_spectra = [{'spectrum_file': './test_data/test_spectrum1.fits', 'sp_counts': 766, 'bg_counts': 8474, 'sp_netcts': 271.88, 'sp_exp': 82181.93, 'flag': 0, 'snr': 7.65, 'instrument': 'pn'}]    mos_spectra = [        {'spectrum_file': './test_data/test_spectrum2.fits', 'sp_counts': 308, 'bg_counts': 14296, 'sp_netcts': 63.04, 'sp_exp': 104469.41, 'flag': 0, 'snr': 2.68, 'instrument': 'MOS'},        {'spectrum_file': './test_data/test_spectrum3.fits', 'sp_counts': 236, 'bg_counts': 19138, 'sp_netcts': 99.07, 'sp_exp': 105554.51, 'flag': 0, 'snr': 5.13, 'instrument': 'MOS'}    ]    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (pn and MOS spectra):", merged_list)    assert len(merged_list) == 2    assert merged_list[0]['spectrum_file'].endswith('_pn.grp')    assert merged_list[1]['spectrum_file'].endswith('_MOS.grp')    assert abs(merged_list[1]['snr'] - 5.13) <= 0.01    logger.info("All tests passed!")if __name__ == "__main__":    test_merge_spectra()