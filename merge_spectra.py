import osimport shutilimport loggingfrom rebin_spectrum import rebin_spectrumlogger = logging.getLogger(__name__)def merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1):    """    Merge and rebin pn and MOS spectra.    """    logger.info('Merging spectra')    logger.debug(f"PN spectra: {pn_spectra}")    logger.debug(f"MOS spectra: {mos_spectra}")    # Initialize merged_spectra    merged_spectra = []    for spec_list in [pn_spectra, mos_spectra]:        if not spec_list:            continue        # Determine instrument type        instrument = spec_list[0]['instrument']        outname = f"{srcid}_{instrument}.pha"        merged_spectrum = os.path.join(output_dir, outname)        # Select the spectrum with the highest SNR        best_spectrum = max(spec_list, key=lambda x: x['snr'])        logger.debug(f"Best spectrum selected: {best_spectrum}")        # Ensure background_file exists in the best_spectrum        if 'background_file' not in best_spectrum:            raise KeyError(f"Missing 'background_file' key in spectrum: {best_spectrum}")        # Copy the best spectrum to the output directory        if os.path.exists(merged_spectrum):            logger.warning(f"File {merged_spectrum} already exists, it will be overwritten")        shutil.copy2(best_spectrum['spectrum_file'], merged_spectrum)        # Rebin the spectrum        binned_spectrum = os.path.splitext(merged_spectrum)[0] + '.grp'        spec_dict = rebin_spectrum(            infile=merged_spectrum,            outfile=binned_spectrum,            background_file=best_spectrum['background_file'],            log_file=log_file,            mincts=mincts        )        if spec_dict['flag'] >= 0:            spec_dict['instrument'] = instrument            merged_spectra.append(spec_dict)  # Append to merged_spectra        else:            logger.error(f"Failed to rebin spectrum for {instrument}: {best_spectrum['spectrum_file']}")    #logger.info(f"Merged spectrum list: {merged_spectra}")    return merged_spectradef test_merge_spectra():    output_dir = './test_data/test'    if not os.path.exists(output_dir):        os.mkdir(output_dir)    log_file = os.path.join(output_dir, 'test_merge_spectra.txt')    logging.basicConfig(filename=log_file, level=logging.INFO)    srcid = 3067718060100029    # Test with empty lists    pn_spectra = []    mos_spectra = []    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (empty test):", merged_list)    assert len(merged_list) == 0    # Test with one spectrum in pn and none in mos    pn_spectra = [{'spectrum_file': 'dummyPN.fits', 'sp_counts': -1, 'bg_counts': 1, 'sp_netcts': -1, 'sp_exp': 1000.0, 'flag': 2, 'snr': -1, 'instrument': 'pn'}]    mos_spectra = []    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (one pn spectrum):", merged_list)    assert len(merged_list) == 1    assert merged_list[0]['flag'] == 2    # Test with one pn spectrum    pn_spectra = [{'spectrum_file': './test_data/test_spectrum1.fits', 'sp_counts': 766, 'bg_counts': 8474, 'sp_netcts': 271.88, 'sp_exp': 82181.93, 'flag': 0, 'snr': 7.65, 'instrument': 'pn'}]    mos_spectra = []    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (single pn spectrum):", merged_list)    assert len(merged_list) == 1    assert merged_list[0]['spectrum_file'].endswith('_pn.grp')    # Test with multiple MOS spectra    mos_spectra = [        {'spectrum_file': './test_data/test_spectrum2.fits', 'sp_counts': 308, 'bg_counts': 14296, 'sp_netcts': 63.04, 'sp_exp': 104469.41, 'flag': 0, 'snr': 2.68, 'instrument': 'MOS'},        {'spectrum_file': './test_data/test_spectrum3.fits', 'sp_counts': 236, 'bg_counts': 19138, 'sp_netcts': 99.07, 'sp_exp': 105554.51, 'flag': 0, 'snr': 5.13, 'instrument': 'MOS'}    ]    pn_spectra = []    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (multiple MOS spectra):", merged_list)    assert len(merged_list) == 1    assert merged_list[0]['spectrum_file'].endswith('_MOS.grp')    assert abs(merged_list[0]['snr'] - 5.13) <= 0.01    # Test with pn and mos spectra    pn_spectra = [{'spectrum_file': './test_data/test_spectrum1.fits', 'sp_counts': 766, 'bg_counts': 8474, 'sp_netcts': 271.88, 'sp_exp': 82181.93, 'flag': 0, 'snr': 7.65, 'instrument': 'pn'}]    mos_spectra = [        {'spectrum_file': './test_data/test_spectrum2.fits', 'sp_counts': 308, 'bg_counts': 14296, 'sp_netcts': 63.04, 'sp_exp': 104469.41, 'flag': 0, 'snr': 2.68, 'instrument': 'MOS'},        {'spectrum_file': './test_data/test_spectrum3.fits', 'sp_counts': 236, 'bg_counts': 19138, 'sp_netcts': 99.07, 'sp_exp': 105554.51, 'flag': 0, 'snr': 5.13, 'instrument': 'MOS'}    ]    merged_list = merge_spectra(pn_spectra, mos_spectra, srcid, output_dir, log_file, mincts=1)    print("Merged list (pn and MOS spectra):", merged_list)    assert len(merged_list) == 2    assert merged_list[0]['spectrum_file'].endswith('_pn.grp')    assert merged_list[1]['spectrum_file'].endswith('_MOS.grp')    assert abs(merged_list[1]['snr'] - 5.13) <= 0.01    logger.info("All tests passed!")if __name__ == "__main__":    test_merge_spectra()